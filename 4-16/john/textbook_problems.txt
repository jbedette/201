2.57)
1) val:10
int: 0a 00 00 00
float: 00 00 20 41
ptr: e8 fd 31 32 fe 7f 00 00
short: 0a 00
long: 0a 00 00 00 00 00 00 00
dbl: 00 00 00 00 00 00 24 40

2) val:-10
int: f6 ff ff ff
float: 00 00 20 c1
ptr: e8 fd 31 32 fe 7f 00 00
short: f6 ff
long: f6 ff ff ff ff ff ff ff
dbl: 00 00 00 00 00 00 24 c0

3) val:16
int: 10 00 00 00
float: 00 00 80 41
ptr: e8 fd 31 32 fe 7f 00 00
short: 10 00
long: 10 00 00 00 00 00 00 00
dbl: 00 00 00 00 00 00 30 40

4) val:-16
int: f0 ff ff ff
float: 00 00 80 c1
ptr: e8 fd 31 32 fe 7f 00 00
short: f0 ff
long: f0 ff ff ff ff ff ff ff
dbl: 00 00 00 00 00 00 30 c0

2.58) int: 01 00 00 00
endianness: little endian

2.59) rest y + least sig x: 76 54 32 ef

void least_x_rest_y(){
  unsigned int x = 0x89ABCDEF;
  unsigned int y = 0x76543210;
  int len = sizeof(int);
  int i = len-1;
  byte_pointer X = (byte_pointer)&x;
  byte_pointer Y = (byte_pointer)&y;

  printf("\n2.59) rest y + least sig x:");
  for(; i >0; --i)  
    printf(" %.2x", Y[i]);
  printf(" %.2x\n", *X+(len-4));
}

2.61.A) check if x contains a bit == 1,
1) x = 4, 0
2) x = 0, 1
int bit_is(int x){
  int y = x == 0;
  return y;
}

2.61.B) check if x contains a bit == 0,
1) x = 4, 0
2) x = 3, 0
3) x = 15, 1
int bit_isnt(int x){
  return !(x % 15);
}

2.61.C) check if least sig bit in x  == 1,
1) x = 0, 1
2) x = 15, 1
3) x = 16, 1
int l_bit_is(int x){
  int shift_val = (sizeof(int)-1)<<3;
  int xleft = x << shift_val;
  return !!(xleft == 1);
}

2.61.D) check if most sig bit in x  == 0,
1) x = 4, 0
2) x = 0, 0
3) x = 16, 0
int m_bit_isnt(int x){
  int shift_val = (sizeof(int)-1)<<3;
  int xright = x >> shift_val;
  return !!(xright == 0);
}



